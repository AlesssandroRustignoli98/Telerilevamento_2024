# L'algoritmo K-means è utilizzato per segmentare le immagini in cluster, assegnando ciascun pixel a uno dei gruppi (cluster) 
# in base alla somiglianza dei valori di riflettanza. Questo processo ci permette di identificare differenti tipologie 
# di copertura del suolo come foresta, suolo nudo, acqua, ecc. 
# L'algoritmo aiuta anche nel calcolo degli indici differenziati per analizzare meglio le diverse categorie di superficie.

# Quantificare la variabilità della copertura del suolo

# Carichiamo le librerie necessarie per l'analisi
install.packages("ggplot2")
library(ggplot2)
library(terra)
library(imageRy)

# Visualizziamo le immagini disponibili
im.list()

# Importiamo le immagini del 1992 e del 2006, oltre ad una immagine del sole per sperimentare la classificazione.
m1992 <- im.import("matogrosso_l5_1992219_lrg.jpg")
m2006 <- im.import("matogrosso_ast_2006209_lrg.jpg")
sun <- im.import("Solar_Orbiter_s_first_views_of_the_Sun_pillars.jpg")

# Nell'immagine del sole sono visibili tre livelli energetici differenti: uno giallo (più alto), uno marrone (intermedio) e uno nero (più basso).
# Utilizzando la funzione im.classify, possiamo classificare i pixel dell'immagine in 3 gruppi distinti (cluster), 
# in modo che l'algoritmo assegni ogni pixel a uno dei livelli energetici osservati.

# Creiamo 3 cluster per l'immagine del sole
sunc <- im.classify(sun, num_clusters=3)

# I cluster generati rappresentano i livelli di intensità, dove il primo cluster corrisponde ai livelli più bassi, 
# il secondo ai livelli intermedi e il terzo ai livelli più alti.
# In questo esempio, il nostro livello più basso è rappresentato dal colore giallo, ma in un altro esempio potrebbe essere diverso.

# Passiamo ora alla classificazione delle immagini "matogrosso", per identificare aree di foresta e suolo nudo (e acqua).
# Classifichiamo l'immagine del 1992 in due cluster: uno per la foresta e uno per il suolo nudo.
m1992c <- im.classify(m1992, num_clusters=2)

# In questa classificazione, la classe 1 rappresenta il suolo nudo, mentre la classe 2 rappresenta la foresta.
# In un altro esempio, queste classi potrebbero essere invertite.

# Classificazione per l'immagine del 2006
m2006c <- im.classify(m2006, num_clusters=2)

# Qui, la classe 1 rappresenta la foresta e la classe 2 il suolo nudo.
# Nella pratica, l'algoritmo di classificazione potrebbe restituire valori diversi a seconda delle caratteristiche specifiche dell'immagine.

# Ora calcoliamo la frequenza dei pixel per ciascun cluster nelle due immagini, per vedere quanti pixel appartengono a ciascun gruppo.
f1992 <- freq(m1992c)
f1992

# La frequenza ci fornisce il numero di pixel per ogni classe. 
# In questo esempio, abbiamo circa 1,5 milioni di pixel che rappresentano la foresta e circa 300.000 pixel per il suolo nudo.

# Per calcolare la proporzione di ciascun cluster rispetto al totale dei pixel, dobbiamo prima determinare il numero totale di pixel nell'immagine.
tot1992 <- ncell(m1992c)
prop1992 = f1992 / tot1992
prop1992

# Con questo calcolo otteniamo la proporzione di pixel appartenenti a ciascuna classe.
# Per esempio, la classe 1 (suolo nudo) rappresenta circa il 17% dell'immagine, mentre la classe 2 (foresta) rappresenta l'83%.

# Calcoliamo le percentuali per ogni classe e anno
perc1992 = prop1992 * 100

# Procediamo con l'immagine del 2006
f2006 <- freq(m2006c)

# Per il 2006, calcoliamo la proporzione di pixel per ogni classe.
tot2006 <- ncell(m2006c)
prop2006 = f2006 / tot2006

# Calcoliamo anche le percentuali per l'immagine del 2006
perc2006 = prop2006 * 100

# Risultato delle percentuali:
# 1992: 17% suolo nudo, 83% foresta
# 2006: 55% suolo nudo, 45% foresta

# Creiamo un dataframe con le classi e le percentuali per ciascun anno.
class <- c("Forest", "Human")
y1992 <- c(83, 17)
y2006 <- c(45, 55)

tabout <- data.frame(class, y1992, y2006)

tabout

# Visualizziamo i risultati usando un grafico a barre con ggplot2. Per il 1992, creiamo un grafico delle percentuali per ciascuna classe.
ggplot(tabout, aes(x=class, y=y1992, color=class)) + geom_bar(stat="identity", fill="white")

# Creiamo un grafico simile per l'immagine del 2006
ggplot(tabout, aes(x=class, y=y2006, color=class)) + geom_bar(stat="identity", fill="white")

# Per avere un intervallo preciso nella visualizzazione delle percentuali, possiamo limitare l'asse Y da 0 a 100.
# Aggiungiamo la funzione ylim(c(0,100)) per migliorare la leggibilità.
+ ylim(c(0,100))

# Creiamo un grafico combinato (patchwork) che mostra i due grafici affiancati, uno per il 1992 e uno per il 2006.
p1 <- ggplot(tabout, aes(x=class, y=y1992, color=class)) + geom_bar(stat="identity", fill="white")
p2 <- ggplot(tabout, aes(x=class, y=y2006, color=class)) + geom_bar(stat="identity", fill="white")
p1 + p2
